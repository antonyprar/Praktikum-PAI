import sys

try:
    import gmpy2
    has_gmpy2 = True
except Exception:
    has_gmpy2 = False

e = 3
n = 15759615042180649041596658287668414489189077112235860100211911115250431302849683276285731106548115937638289979087969524234208611870710633515079991373663766423874055118662541824187955220440397928304236310603796796313625606897016057576744677359943486392344503145709579678674348318782229297647714174217516018694539007160608944430937034544250573079612716803553232903441662736871400867227470549648830376257722171953827226464889796516771624865677860133545288603942196828709012321175773472875667188338169400264134585468501056099033472619127264375071663751561759303474430334279790862834581749708954285104699644046613927076737
c = 2344291097829188983579466594189698282383664262684774986896537805572522683128055047748300247696394242490422027188454859807664457337978658793000777936459309009372856166671075431096156773955444505970263472075618053238322211277550632944972952128574619481153303321045511668987706883106816408769713058690096813388100618801583589770113565361941160389675526436558849335309158887629222188384623313561824109056628841144631219564014897602033727802336373408793274102135597864
p_dh = 27418193655772318021836560801851416050692903432601761932322590631270856398846653223338769831601648160706338272455764128686694641329287363057124701884832655950429213044756229849133583778169948663310001940172285290324913736206656993532304071874389264706939842819610194020225775853088482880701572674061964002978113499344301009342814017383033244358886218297201525801832550215845980216778276302227039948212464281320312461226020648259134986770846870958550047603251642455520856609564172643782801942407985734762749720889604382796256436877614065358000405891185557651690273462831344090087006816576227532248090921032709043449811
g = 12050955267775767537568470242064572761840816042113877738976273507498444199871887767403180170097289251517250563450741923892010644458668065104572122677069707
A = 4454616487663596538806517973478271079131182042349146941797659062793031468845492590250220972656964845848862358234779851686655635425033976780511424646136324
B = 4124156168261670138441671835404469967345593457632202994459118983978680881665901731998435347814290648119083726613759685795578080384055344519189024908147976

def bxor_int(x: int, y: int) -> int:
    return x ^ y

def integer_nth_root(n_val: int, k: int) -> int:
    """Return floor(n_val ** (1/k)) using binary search (pure Python)."""
    if n_val < 0:
        raise ValueError("n_val must be non-negative")
    if n_val in (0, 1):
        return n_val
    lo = 0
    hi = 1 << ((n_val.bit_length() + k - 1) // k) 
    while lo < hi:
        mid = (lo + hi) // 2
        if mid**k < n_val:
            lo = mid + 1
        else:
            hi = mid
    root = lo - 1 if lo**k != n_val else lo
    return root

def iroot_k(n_val: int, k: int) -> int:
    """Integer k-th root using gmpy2 if available, otherwise pure Python."""
    if has_gmpy2:
        root, exact = gmpy2.iroot(n_val, k)
        return int(root)
    else:
        return integer_nth_root(n_val, k)

def main():
    # 1) compute shared_int from public values
    shared_int = A ^ B ^ g
    print("[*] shared_int computed (hex):", hex(shared_int))

    # 2) compute integer cube root of c
    print("[*] computing integer cube root of c ... (this may take a moment)")
    flag2 = iroot_k(c, 3)

    # verify exact cube
    if flag2**3 != c:
        print("[!] Warning: cube root not exact. flag2**3 != c")
        # still continue â€” may be modular wrap; but for this challenge we expect exact cube
    else:
        print("[*] perfect cube confirmed for c.")
    print("[*] flag2 (hex):", hex(flag2))

    # 3) recover flag_int by XORing flag2 and shared_int
    flag_int = flag2 ^ shared_int
    print("[*] flag_int (hex):", hex(flag_int))

    # 4) convert to bytes
    blen = (flag_int.bit_length() + 7) // 8
    flag_bytes = flag_int.to_bytes(blen, byteorder='big')
    try:
        flag_text = flag_bytes.decode()
    except Exception:
        # try to strip leading zero if any
        if flag_bytes and flag_bytes[0] == 0:
            flag_bytes = flag_bytes.lstrip(b'\x00')
        try:
            flag_text = flag_bytes.decode()
        except Exception:
            flag_text = None

    print("[*] recovered bytes (hex):", flag_bytes.hex())
    if flag_text:
        print("[*] Recovered FLAG:", flag_text)
    else:
        print("[!] Could not decode bytes to UTF-8. See hex above.")

if __name__ == "__main__":
    main()
